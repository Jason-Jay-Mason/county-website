# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Float, last: Float): DocumentConnection!
  getDocumentFields: JSON!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Float, last: Float): GlobalConnection!
  getHomeDocument(relativePath: String): HomeDocument!
  getHomeList(before: String, after: String, first: Float, last: Float): HomeConnection!
  getAboutDocument(relativePath: String): AboutDocument!
  getAboutList(before: String, after: String, first: Float, last: Float): AboutConnection!
  getContactDocument(relativePath: String): ContactDocument!
  getContactList(before: String, after: String, first: Float, last: Float): ContactConnection!
  getProjectsDocument(relativePath: String): ProjectsDocument!
  getProjectsList(before: String, after: String, first: Float, last: Float): ProjectsConnection!
  getProjectDocument(relativePath: String): ProjectDocument!
  getProjectList(before: String, after: String, first: Float, last: Float): ProjectConnection!
  getServiceDocument(relativePath: String): ServiceDocument!
  getServiceList(before: String, after: String, first: Float, last: Float): ServiceConnection!
  getLegalDocument(relativePath: String): LegalDocument!
  getLegalList(before: String, after: String, first: Float, last: Float): LegalConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float): DocumentConnection!
}

union DocumentNode = GlobalDocument | HomeDocument | AboutDocument | ContactDocument | ProjectsDocument | ProjectDocument | ServiceDocument | LegalDocument

type GlobalHeaderNavChildren {
  href: String
  label: String
  blurb: String
  icon: String
}

type GlobalHeaderNav {
  href: String
  label: String
  children: [GlobalHeaderNavChildren]
}

type GlobalHeader {
  nav: [GlobalHeaderNav]
}

type GlobalReviewsReviewsList {
  title: String
  profile: String
  review: String
  link: String
  date: String
}

type GlobalReviews {
  sliderSpeed: Float
  reviewsList: [GlobalReviewsReviewsList]
}

type GlobalContactInfo {
  businessName: String
  phoneNumber: String
  email: String
  hours: String
  facebookUrl: String
  googleMapsUrl: String
  linkedInUrl: String
  youTubeUrl: String
  instagramUrl: String
  bbbUrl: String
}

type GlobalFooterServices {
  title: String
  link: String
}

type GlobalFooterPages {
  title: String
  link: String
}

union GlobalFooterLegalTitleDocument = LegalDocument

type GlobalFooterLegal {
  title: GlobalFooterLegalTitleDocument
}

type GlobalFooter {
  services: [GlobalFooterServices]
  pages: [GlobalFooterPages]
  legal: [GlobalFooterLegal]
}

type Global {
  header: GlobalHeader
  reviews: GlobalReviews
  contactInfo: GlobalContactInfo
  footer: GlobalFooter
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type HomeHero {
  subHeadline: String
  headline: String
  mobileBackgroundSrc: String
  hook: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
}

union HomeServiceSliderCategoryListServicesTitleDocument = ServiceDocument

type HomeServiceSliderCategoryListServices {
  title: HomeServiceSliderCategoryListServicesTitleDocument
}

type HomeServiceSliderCategoryList {
  title: String
  headline: String
  body: String
  toggleServices: Boolean
  services: [HomeServiceSliderCategoryListServices]
  ctaButtonText: String
  ctaButtonLink: String
  beforeImage: String
  afterImage: String
}

type HomeServiceSlider {
  categoryList: [HomeServiceSliderCategoryList]
}

type HomePlanSliderCategoryList {
  title: String
  headline: String
  icon: String
  body: String
  ctaButtonText: String
  ctaButtonLink: String
  featuredImage: String
}

type HomePlanSlider {
  categoryList: [HomePlanSliderCategoryList]
}

type HomePreFooterCTA {
  subHeadline: String
  headline: String
  ctaButtonText: String
  ctaButtonLink: String
}

type HomeSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Home {
  hero: HomeHero
  serviceSlider: HomeServiceSlider
  planSlider: HomePlanSlider
  preFooterCTA: HomePreFooterCTA
  seo: HomeSeo
}

type HomeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Home!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type HomeConnectionEdges {
  cursor: String
  node: HomeDocument
}

type HomeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type AboutHero {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

type AboutFeaturedSection {
  subHeadline: String
  headline: String
  image: String
  body: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
}

type AboutFeaturedGridFeatures {
  title: String
  iconToggle: Boolean
  icon: String
  headline: String
  body: String
}

type AboutFeaturedGrid {
  maxColumns: Float
  features: [AboutFeaturedGridFeatures]
}

type AboutLongTextBodyRowsBodyColumns {
  body: String
}

type AboutLongTextBodyRows {
  bodyColumns: [AboutLongTextBodyRowsBodyColumns]
}

type AboutLongText {
  subHeadline: String
  headline: String
  bodyRows: [AboutLongTextBodyRows]
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  ctaButtonToggle2: Boolean
  ctaButtonText2: String
  ctaButtonLink2: String
}

type AboutSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type About {
  hero: AboutHero
  featuredSection: AboutFeaturedSection
  featuredGrid: AboutFeaturedGrid
  longText: AboutLongText
  seo: AboutSeo
}

type AboutDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: About!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AboutConnectionEdges {
  cursor: String
  node: AboutDocument
}

type AboutConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type ContactHero {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

type ContactSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Contact {
  hero: ContactHero
  serviceAreas: [String]
  seo: ContactSeo
}

type ContactDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Contact!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ContactConnectionEdges {
  cursor: String
  node: ContactDocument
}

type ContactConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type ProjectsHero {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

type ProjectsSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Projects {
  hero: ProjectsHero
  seo: ProjectsSeo
}

type ProjectsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Projects!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ProjectsConnectionEdges {
  cursor: String
  node: ProjectsDocument
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type ProjectMorePhotos {
  title: String
}

type ProjectSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Project {
  title: String
  date: String
  featuredImage: String
  beforeAfterToggle: Boolean
  beforeImage: String
  afterImage: String
  projectDescription: String
  morePhotos: [ProjectMorePhotos]
  seo: ProjectSeo
  deactivate: Boolean
}

type ProjectDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Project!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ProjectConnectionEdges {
  cursor: String
  node: ProjectDocument
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type ServiceHero {
  icon: String
  pageTitle: String
  backgroundImageSrc: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

type ServiceFeaturedGridFeatures {
  title: String
  iconToggle: Boolean
  icon: String
  headline: String
  body: String
}

type ServiceFeaturedGrid {
  maxColumns: Float
  features: [ServiceFeaturedGridFeatures]
}

type ServiceLongTextBodyRowsBodyColumns {
  body: String
}

type ServiceLongTextBodyRows {
  bodyColumns: [ServiceLongTextBodyRowsBodyColumns]
}

type ServiceLongText {
  subHeadline: String
  headline: String
  bodyRows: [ServiceLongTextBodyRows]
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  ctaButtonToggle2: Boolean
  ctaButtonText2: String
  ctaButtonLink2: String
}

type ServiceSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Service {
  serviceName: String
  icon: String
  hero: ServiceHero
  featuredGrid: ServiceFeaturedGrid
  longText: ServiceLongText
  seo: ServiceSeo
}

type ServiceDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Service!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ServiceConnectionEdges {
  cursor: String
  node: ServiceDocument
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type LegalSeo {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

type Legal {
  legalDocumentTitle: String
  body: String
  seo: LegalSeo
}

type LegalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Legal!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type LegalConnectionEdges {
  cursor: String
  node: LegalDocument
}

type LegalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [LegalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  createGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updateHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  createHomeDocument(relativePath: String!, params: HomeMutation!): HomeDocument!
  updateAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  createAboutDocument(relativePath: String!, params: AboutMutation!): AboutDocument!
  updateContactDocument(relativePath: String!, params: ContactMutation!): ContactDocument!
  createContactDocument(relativePath: String!, params: ContactMutation!): ContactDocument!
  updateProjectsDocument(relativePath: String!, params: ProjectsMutation!): ProjectsDocument!
  createProjectsDocument(relativePath: String!, params: ProjectsMutation!): ProjectsDocument!
  updateProjectDocument(relativePath: String!, params: ProjectMutation!): ProjectDocument!
  createProjectDocument(relativePath: String!, params: ProjectMutation!): ProjectDocument!
  updateServiceDocument(relativePath: String!, params: ServiceMutation!): ServiceDocument!
  createServiceDocument(relativePath: String!, params: ServiceMutation!): ServiceDocument!
  updateLegalDocument(relativePath: String!, params: LegalMutation!): LegalDocument!
  createLegalDocument(relativePath: String!, params: LegalMutation!): LegalDocument!
}

input DocumentMutation {
  global: GlobalMutation
  home: HomeMutation
  about: AboutMutation
  contact: ContactMutation
  projects: ProjectsMutation
  project: ProjectMutation
  service: ServiceMutation
  legal: LegalMutation
}

input GlobalHeaderNavChildrenMutation {
  href: String
  label: String
  blurb: String
  icon: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
  children: [GlobalHeaderNavChildrenMutation]
}

input GlobalHeaderMutation {
  nav: [GlobalHeaderNavMutation]
}

input GlobalReviewsReviewsListMutation {
  title: String
  profile: String
  review: String
  link: String
  date: String
}

input GlobalReviewsMutation {
  sliderSpeed: Float
  reviewsList: [GlobalReviewsReviewsListMutation]
}

input GlobalContactInfoMutation {
  businessName: String
  phoneNumber: String
  email: String
  hours: String
  facebookUrl: String
  googleMapsUrl: String
  linkedInUrl: String
  youTubeUrl: String
  instagramUrl: String
  bbbUrl: String
}

input GlobalFooterServicesMutation {
  title: String
  link: String
}

input GlobalFooterPagesMutation {
  title: String
  link: String
}

input GlobalFooterLegalMutation {
  title: String
}

input GlobalFooterMutation {
  services: [GlobalFooterServicesMutation]
  pages: [GlobalFooterPagesMutation]
  legal: [GlobalFooterLegalMutation]
}

input GlobalMutation {
  header: GlobalHeaderMutation
  reviews: GlobalReviewsMutation
  contactInfo: GlobalContactInfoMutation
  footer: GlobalFooterMutation
}

input HomeHeroMutation {
  subHeadline: String
  headline: String
  mobileBackgroundSrc: String
  hook: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
}

input HomeServiceSliderCategoryListServicesMutation {
  title: String
}

input HomeServiceSliderCategoryListMutation {
  title: String
  headline: String
  body: String
  toggleServices: Boolean
  services: [HomeServiceSliderCategoryListServicesMutation]
  ctaButtonText: String
  ctaButtonLink: String
  beforeImage: String
  afterImage: String
}

input HomeServiceSliderMutation {
  categoryList: [HomeServiceSliderCategoryListMutation]
}

input HomePlanSliderCategoryListMutation {
  title: String
  headline: String
  icon: String
  body: String
  ctaButtonText: String
  ctaButtonLink: String
  featuredImage: String
}

input HomePlanSliderMutation {
  categoryList: [HomePlanSliderCategoryListMutation]
}

input HomePreFooterCTAMutation {
  subHeadline: String
  headline: String
  ctaButtonText: String
  ctaButtonLink: String
}

input HomeSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input HomeMutation {
  hero: HomeHeroMutation
  serviceSlider: HomeServiceSliderMutation
  planSlider: HomePlanSliderMutation
  preFooterCTA: HomePreFooterCTAMutation
  seo: HomeSeoMutation
}

input AboutHeroMutation {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

input AboutFeaturedSectionMutation {
  subHeadline: String
  headline: String
  image: String
  body: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
}

input AboutFeaturedGridFeaturesMutation {
  title: String
  iconToggle: Boolean
  icon: String
  headline: String
  body: String
}

input AboutFeaturedGridMutation {
  maxColumns: Float
  features: [AboutFeaturedGridFeaturesMutation]
}

input AboutLongTextBodyRowsBodyColumnsMutation {
  body: String
}

input AboutLongTextBodyRowsMutation {
  bodyColumns: [AboutLongTextBodyRowsBodyColumnsMutation]
}

input AboutLongTextMutation {
  subHeadline: String
  headline: String
  bodyRows: [AboutLongTextBodyRowsMutation]
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  ctaButtonToggle2: Boolean
  ctaButtonText2: String
  ctaButtonLink2: String
}

input AboutSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input AboutMutation {
  hero: AboutHeroMutation
  featuredSection: AboutFeaturedSectionMutation
  featuredGrid: AboutFeaturedGridMutation
  longText: AboutLongTextMutation
  seo: AboutSeoMutation
}

input ContactHeroMutation {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

input ContactSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input ContactMutation {
  hero: ContactHeroMutation
  serviceAreas: [String]
  seo: ContactSeoMutation
}

input ProjectsHeroMutation {
  icon: String
  pageTitle: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

input ProjectsSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input ProjectsMutation {
  hero: ProjectsHeroMutation
  seo: ProjectsSeoMutation
}

input ProjectMorePhotosMutation {
  title: String
}

input ProjectSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input ProjectMutation {
  title: String
  date: String
  featuredImage: String
  beforeAfterToggle: Boolean
  beforeImage: String
  afterImage: String
  projectDescription: String
  morePhotos: [ProjectMorePhotosMutation]
  seo: ProjectSeoMutation
  deactivate: Boolean
}

input ServiceHeroMutation {
  icon: String
  pageTitle: String
  backgroundImageSrc: String
  headline: String
  hook: String
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  videoButtonToggle: Boolean
  videoButtonText: String
  videoButtonLink: String
}

input ServiceFeaturedGridFeaturesMutation {
  title: String
  iconToggle: Boolean
  icon: String
  headline: String
  body: String
}

input ServiceFeaturedGridMutation {
  maxColumns: Float
  features: [ServiceFeaturedGridFeaturesMutation]
}

input ServiceLongTextBodyRowsBodyColumnsMutation {
  body: String
}

input ServiceLongTextBodyRowsMutation {
  bodyColumns: [ServiceLongTextBodyRowsBodyColumnsMutation]
}

input ServiceLongTextMutation {
  subHeadline: String
  headline: String
  bodyRows: [ServiceLongTextBodyRowsMutation]
  ctaButtonToggle: Boolean
  ctaButtonText: String
  ctaButtonLink: String
  ctaButtonToggle2: Boolean
  ctaButtonText2: String
  ctaButtonLink2: String
}

input ServiceSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input ServiceMutation {
  serviceName: String
  icon: String
  hero: ServiceHeroMutation
  featuredGrid: ServiceFeaturedGridMutation
  longText: ServiceLongTextMutation
  seo: ServiceSeoMutation
}

input LegalSeoMutation {
  title: String
  description: String
  image: String
  noFollow: Boolean
  noIndex: Boolean
}

input LegalMutation {
  legalDocumentTitle: String
  body: String
  seo: LegalSeoMutation
}

schema {
  query: Query
  mutation: Mutation
}
  